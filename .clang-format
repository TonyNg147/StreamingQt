# The extra indent or outdent of access modifiers, e.g. public:
AccessModifierOffset: -4

# Horizontally aligns arguments after an open bracket.
# Don't align, instead use ContinuationIndentWidth
AlignAfterOpenBracket: AlwaysBreak

# If not None, when using initialization for an array of structs aligns the fields into columns.
# This option only applied to arrays with equal number of columns per row.
AlignArrayOfStructures: None

# Don't align consecutive macros, assignments, declarations, e.g.:
# int aaaa = 12;
# int b = 23; // not aligned to aaaa and ccc
# int ccc = 23; // not aligned to aaaa and b
AlignConsecutiveMacros: None
AlignConsecutiveAssignments: None
AlignConsecutiveBitFields: AcrossComments
AlignConsecutiveDeclarations: None

# Align escaped newlines in the right-most column.
# #define A                                     \
#     int aaaa;                                 \
AlignEscapedNewlines: Right

# Align: Horizontally align operands of binary and ternary expressions.
# When BreakBeforeBinaryOperators is set, the wrapped operator is aligned
# with the operand on the first line.
# int aaa = bbbbbbbbbbbbbbb
#          + ccccccccccccccc;
AlignOperands:   Align

# Don't align trailing comments
# int a; // My comment a
# int b = 2; // comment about b
AlignTrailingComments:
  Kind: Never
  OverEmptyLines: 2

# If a function call or braced initializer list doesn't fit on a line, allow putting all arguments
# onto the next line, even if BinPackArguments is false.
# true:
# callFunction(
#    a, b, c, d);
# false:
# callFunction(a,
#             b,
#             c,
#             d);
AllowAllArgumentsOnNextLine: true

# If the function declaration doesn't fit on a line, allow putting all parameters of a function
# declaration onto the next line even if BinPackParameters is false.
# true:
# void myFunction(
#    int a, int b, int c, int d, int e);
# false:
# void myFunction(int a,
#                int b,
#                int c,
#                int d,
#                int e);
AllowAllParametersOfDeclarationOnNextLine: true

AllowShortEnumsOnASingleLine: false

# Never merge blocks into a single line.
# while (true) { // this could be changed with `Empty`
# }
# while (true) { // this could be changed with `Always`
#  continue;
# }
AllowShortBlocksOnASingleLine: Never

# Short  case labels will NOT be contracted to a single line
# true:                               false:
# switch (a) {                vs.     switch (a) {
# case 1: x = 1; break;               case 1:
# case 2: return;                       x = 1;
# }                                     break;
#                                     case 2:
#                                       return;
#                                     }
AllowShortCaseLabelsOnASingleLine: false

# Never merge functions into a single line.
AllowShortFunctionsOnASingleLine: None

# Merge lambda into a single line if argument of a function.
# auto lambda = [](int a) {
#     return a;
# };
# sort(a.begin(), a.end(), ()[] { return x < y; })
AllowShortLambdasOnASingleLine: Inline

# Never put short ifs on the same line.
AllowShortIfStatementsOnASingleLine: Never

# If true, `while (true) continue;` can be put on a single line.
AllowShortLoopsOnASingleLine: false

# None: Break after return type automatically. PenaltyReturnTypeOnItsOwnLine is taken into account.
# class A {
#  int f() { return 0; };
# };
# int f();
# int f() { return 1; }
# Possible values: None, All, TopLevel, AllDefinitions, TopLevelDefinitions
AlwaysBreakAfterReturnType: None

# This flag is mean to make cases where there are multiple multiline strings in a file look more
# consistent. Thus, it will only take effect if wrapping the string at that point leads to it being
# indented ContinuationIndentWidth spaces from the start of the line.
# true:                              false:
# aaaa =                     vs.     aaaa = "bbbb"
#     "bbbb"                                "cccc";
#     "cccc";
AlwaysBreakBeforeMultilineStrings: true

# Always break after template declaration.
# template <typename T>
# T foo() {
# }
AlwaysBreakTemplateDeclarations: Yes

AttributeMacros: []

# If false, a function call's arguments will either be all on the same line
# or will have one line each.
# true:
# void f() {
#   f(aaaaaaaaaaaaaaaaaaaa, aaaaaaaaaaaaaaaaaaaa,
#     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);
# }
# false:
# void f() {
#   f(aaaaaaaaaaaaaaaaaaaa,
#     aaaaaaaaaaaaaaaaaaaa,
#     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);
# }
BinPackArguments: false

# If false, a function declaration's or function definition's parameters
# will either all be on the same line or will have one line each.
BinPackParameters: false

BraceWrapping:
  AfterCaseLabel:  false
  AfterClass:      true
  AfterControlStatement: Never
  AfterEnum:       true
  AfterFunction:   true
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     true
  AfterUnion:      false
  AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  BeforeLambdaBody: false
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# Break before operators that aren't assignments.
# LooooooooooongType loooooooooooooooooooooongVariable =
#     someLooooooooooooooooongFunction();
# bool value = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#                      + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#                  == aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#              && aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
#                     > ccccccccccccccccccccccccccccccccccccccccc;
BreakBeforeBinaryOperators: NonAssignment

BreakBeforeBraces: Custom

BreakBeforeConceptDeclarations: Allowed

# Replaced with BreakInheritanceList
# BreakBeforeInheritanceComma: true

# Break inheritance list before the colon and commas, and align the commas with the colon.
# class Foo
#     : Base1
#     , Base2
# {};
BreakInheritanceList: BeforeComma

# If true, ternary operators will be placed after line breaks.
# true:
# veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription
#     ? firstValue
#     : SecondValueVeryVeryVeryVeryLong;
BreakBeforeTernaryOperators: true

# Replaced with BreakConstructorInitializers
# BreakConstructorInitializersBeforeComma: true

# Break constructor initializers before the colon and commas, and align the commas with the colon.
# Constructor()
#     : initializer1()
#     , initializer2()
BreakConstructorInitializers: BeforeComma

# Break after a group of C++11 attributes before a function declaration/definition name.
BreakAfterAttributes: Leave

BreakAfterJavaFieldAnnotations: false

# Allow breaking string literals when formatting
BreakStringLiterals: true

ColumnLimit:     100

# A regular expression that describes comments with special meaning, which should not be split into
# lines or otherwise changed.
#    // CommentPragmas: '^ FOOBAR pragma:'
#    // Will leave the following line unaffected
#    #include <vector> // FOOBAR pragma: keep
CommentPragmas:  '^ IWYU pragma:'

# If true, consecutive namespace declarations will be on the same line. If false, each namespace is
# declared on a new line.
# namemespace Foo { namespace Bar {
# }}
CompactNamespaces: true

ConstructorInitializerIndentWidth: 4

ContinuationIndentWidth: 4

# If true, format braced lists as best suited for C++11 braced lists.
# true:                                  false:
# vector<int> x{1, 2, 3, 4};     vs.     vector<int> x{ 1, 2, 3, 4 };
# vector<T> x{{}, {}, {}, {}};           vector<T> x{ {}, {}, {}, {} };
# f(MyMap[{composite, key}]);            f(MyMap[{ composite, key }]);
# new int[3]{1, 2, 3};                   new int[3]{ 1, 2, 3 };
Cpp11BracedListStyle: true

# If true, analyze the formatted file for the most common alignment of & and *.
# PointerAlignment is used only as fallback.
DerivePointerAlignment: false

# Disables formatting completely.
DisableFormat:   false

# Defines when to put an empty line after access modifiers.
# EmptyLineBeforeAccessModifier configuration handles the number of empty lines between two access modifiers.
EmptyLineAfterAccessModifier: Never

# Always add empty line before access modifiers (private, public, etc) unless access modifier is
# at the start of struct or class definition
EmptyLineBeforeAccessModifier: Always

# If true, clang-format detects whether function calls and definitions
# are formatted with one parameter per line.
ExperimentalAutoDetectBinPacking: false

# If true, clang-format adds missing namespace end comments and fixes invalid existing ones.
FixNamespaceComments: true

ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

StatementAttributeLikeMacros:
  - Q_EMIT

# `Preserve`: Sort each #include block separately.
IncludeBlocks:   Preserve
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false

# Specify a regular expression of suffixes that are allowed in the file-to-main-include mapping.
IncludeIsMainRegex: '$'

# Specify a regular expression for files being formatted that are allowed to be considered "main"
# in the file-to-main-include mapping.
IncludeIsMainSourceRegex: ''

# Specify whether access modifiers (public/private/etc.) should have their own indentation level.
IndentAccessModifiers: false

IndentCaseLabels: false

IndentCaseBlocks: false

IndentGotoLabels: false

# `AfterHash`: Indents directives after the hash.
# #if FOO
# #  if BAR
# #    include <foo>
# #  endif
# #endif
IndentPPDirectives: AfterHash

IndentExternBlock: NoIndent

IndentRequiresClause: true

IndentWidth:     4

# Indent if a function definition or declaration is wrapped after the type.
# true:
#    LoooooooooooooooooooooooooooooooooooooooongReturnType
#        LoooooooooooooooooooooooooooooooongFunctionDeclaration();
# false:
#    LoooooooooooooooooooooooooooooooooooooooongReturnType
#    LoooooooooooooooooooooooooooooooongFunctionDeclaration();
IndentWrappedFunctionNames: true

# Insert braces after control statements (if, else, for, do, and while) in C++ unless
# the control statements are inside macro definitions or the braces would enclose preprocessor directives.
InsertBraces: true

InsertNewlineAtEOF: true

# If set to `Wrapped` will insert trailing commas in container literals (arrays and objects)
# that wrap across multiple lines. It is currently only available for JavaScript.
# `InsertTrailingCommas` cannot be used together with `BinPackArguments`
# as inserting the comma disables bin-packing.
# Wrapped:
# const someArray = [
# aaaaaaaaaaaaaaaaaaaaaaaaaa,
# aaaaaaaaaaaaaaaaaaaaaaaaaa,
# aaaaaaaaaaaaaaaaaaaaaaaaaa,
# //                        ^ inserted
# ]
InsertTrailingCommas: None

# Format integer literal separators (' for C++ and _ for C#, Java, and JavaScript).
IntegerLiteralSeparator:
  Binary: 4 # 0b1001'1001'1110'1101;
  Decimal: 0 # leave the literal as is
  Hex: 4 # 0xDEAD'BEEF'DEAD'BEEF

JavaScriptQuotes: Leave

JavaScriptWrapImports: true

KeepEmptyLinesAtTheStartOfBlocks: false

# The indentation style of lambda bodies. Signature (the default) causes the lambda body
# to be indented one additional level relative to the indentation level of the signature.
# OuterScope forces the lambda body to be indented one additional level relative to the parent scope containing the lambda signature
LambdaBodyIndentation: Signature

# Language, this format style is targeted at.
# TODO: probably we should create separate files for Cpp, ObjC, JavaScript
# LanguageKind: Cpp

MacroBlockBegin: ''
MacroBlockEnd:   ''

MaxEmptyLinesToKeep: 1

NamespaceIndentation: None

ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 4
ObjCBreakBeforeNestedBlockParam: true #WebKit
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true

# The number of columns to use for indentation of preprocessor statements.
# When set to -1 (default) IndentWidth is used also for preprocessor statements.
PPIndentWidth: 4

# Always put each constructor initializer on its own line.
PackConstructorInitializers: Never

# The penalty for breaking around an assignment operator.
PenaltyBreakAssignment: 60

# The penalty for breaking a function call after `call(`
PenaltyBreakBeforeFirstCallParameter: 1

# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 500

# The penalty for breaking before the first `<<`
PenaltyBreakFirstLessLess: 1

# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000 #LLVM

# The penalty for breaking after template declaration.
PenaltyBreakTemplateDeclaration: 1

# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 59

# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 120

# Penalty for each character of whitespace indentation
# (counted relative to leading non-whitespace column): https://reviews.llvm.org/D90534
PenaltyIndentedWhitespace: 5

PointerAlignment: Right

# The order in which the qualifiers appear. Order is an array that can contain any of the following:
# const/inline/static/friend/constexpr/volatile/restrict/type
QualifierAlignment: Custom
QualifierOrder: ['static', 'inline', 'constexpr', 'const', 'volatile', 'type' ]

# TODO? Defines hints for detecting supported languages code blocks in raw strings.
# RawStringFormats

ReflowComments:  true

# Always put the 'requires' clause on its own line.
RequiresClausePosition: OwnLine

# Align requires expression body relative to the indentation level of the outer scope the requires expression resides in.
RequiresExpressionIndentation: OuterScope

# Specifies the use of empty lines to separate definition blocks, including classes, structs, enums, and functions.
# Never                  v.s.     Always
# #include <cstring>              #include <cstring>
# struct Foo {
#   int a, b, c;                  struct Foo {
# };                                int a, b, c;
# namespace Ns {                  };
# class Bar {
# public:                         namespace Ns {
SeparateDefinitionBlocks: Always

# The maximal number of unwrapped lines that a short namespace spans. Defaults to 1.
# ShortNamespaceLines: 1     vs.     ShortNamespaceLines: 0
# namespace a {                      namespace a {
#   int foo;                           int foo;
# }                                  } // namespace a
ShortNamespaceLines: 1

SortIncludes: CaseInsensitive

SortUsingDeclarations: true

SpaceAfterCStyleCast: false

SpaceAfterLogicalNot: false

SpaceAfterTemplateKeyword: false

SpaceBeforeAssignmentOperators: true

SpaceBeforeCaseColon: false

# If true, a space will be inserted before a C++11 braced list used to initialize an object
# (after the preceding identifier or type).
SpaceBeforeCpp11BracedList: false

SpaceBeforeCtorInitializerColon: true

SpaceBeforeInheritanceColon: true

# `ControlStatements`: Put a space before opening parentheses
# only after control statement keywords (for/if/while...).
# void f() {
#   if (true) {
#     f();
#  }
# }
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: true
  AfterOverloadedOperator: false
  AfterRequiresInClause: true
  AfterRequiresInExpression: true
  BeforeNonEmptyParentheses: false

SpaceAroundPointerQualifiers: Default

SpaceBeforeRangeBasedForLoopColon: true

SpaceInEmptyBlock: false

# If true, spaces may be inserted into ().
SpaceInEmptyParentheses: false

SpacesBeforeTrailingComments: 1

# The SpacesInAnglesStyle to use for template argument lists.
SpacesInAngles: Never

# If true, spaces will be inserted around if/for/while (and similar) conditions.
SpacesInConditionalStatement: false

# If true, spaces are inserted inside container literals
# (e.g. ObjC and Javascript array and dict literals).
# true:                                  false:
# var arr = [ 1, 2, 3 ];         vs.     var arr = [1, 2, 3];
# f({a : 1, b : 2, c : 3});              f({a: 1, b: 2, c: 3});
SpacesInContainerLiterals: false

# How many spaces are allowed at the start of a line comment.
# To disable the maximum set it to -1, apart from that the maximum takes precedence over the minimum.
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1

# If true, spaces may be inserted into C style casts.
# true:                          false:
# x = ( int32 )y         vs.     x = (int32)y
SpacesInCStyleCastParentheses: false

# If true, spaces will be inserted after ( and before ).
SpacesInParentheses: false

# If true, spaces will be inserted after [ and before ].
# Lambdas without arguments or unspecified size array declarations will not be affected.
# true:                                  false:
# int a[ 5 ];                    vs.     int a[5];
# std::unique_ptr<int[]> foo() {} // Won't be affected
SpacesInSquareBrackets: false

SpaceBeforeSquareBrackets: false
BitFieldColonSpacing: Both

Standard: Latest

StatementMacros:
  - LOAD_OR_EXIT
  - LOAD_CONTAINER_OR_EXIT
  - Q_UNUSED
  - QT_REQUIRE_VERSION

TabWidth:        4

UseCRLF:         false

UseTab:          ForIndentation
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
  - NS_SWIFT_NAME
  - CF_SWIFT_NAME